// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/mock/mock_repository.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	internal "datingapp/internal"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockRepository) BeginTx(ctx context.Context) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepositoryMockRecorder) BeginTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepository)(nil).BeginTx), ctx)
}

// CreateProfileResponse mocks base method.
func (m *MockRepository) CreateProfileResponse(ctx context.Context, tx *sqlx.Tx, response *internal.ProfileResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileResponse", ctx, tx, response)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfileResponse indicates an expected call of CreateProfileResponse.
func (mr *MockRepositoryMockRecorder) CreateProfileResponse(ctx, tx, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileResponse", reflect.TypeOf((*MockRepository)(nil).CreateProfileResponse), ctx, tx, response)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, tx *sqlx.Tx, user *internal.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, user)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, tx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, tx, user)
}

// CreateUserFeature mocks base method.
func (m *MockRepository) CreateUserFeature(ctx context.Context, tx *sqlx.Tx, feature *internal.UserFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserFeature", ctx, tx, feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserFeature indicates an expected call of CreateUserFeature.
func (mr *MockRepositoryMockRecorder) CreateUserFeature(ctx, tx, feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserFeature", reflect.TypeOf((*MockRepository)(nil).CreateUserFeature), ctx, tx, feature)
}

// GetDailyInteractionCount mocks base method.
func (m *MockRepository) GetDailyInteractionCount(ctx context.Context, userID uuid.UUID, since time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyInteractionCount", ctx, userID, since)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyInteractionCount indicates an expected call of GetDailyInteractionCount.
func (mr *MockRepositoryMockRecorder) GetDailyInteractionCount(ctx, userID, since any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyInteractionCount", reflect.TypeOf((*MockRepository)(nil).GetDailyInteractionCount), ctx, userID, since)
}

// GetFeatureByID mocks base method.
func (m *MockRepository) GetFeatureByID(ctx context.Context, featureID uuid.UUID) (*internal.SubscriptionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureByID", ctx, featureID)
	ret0, _ := ret[0].(*internal.SubscriptionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureByID indicates an expected call of GetFeatureByID.
func (mr *MockRepositoryMockRecorder) GetFeatureByID(ctx, featureID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureByID", reflect.TypeOf((*MockRepository)(nil).GetFeatureByID), ctx, featureID)
}

// GetFeatures mocks base method.
func (m *MockRepository) GetFeatures(ctx context.Context) ([]*internal.SubscriptionFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatures", ctx)
	ret0, _ := ret[0].([]*internal.SubscriptionFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatures indicates an expected call of GetFeatures.
func (mr *MockRepositoryMockRecorder) GetFeatures(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatures", reflect.TypeOf((*MockRepository)(nil).GetFeatures), ctx)
}

// GetProfiles mocks base method.
func (m *MockRepository) GetProfiles(ctx context.Context, userID uuid.UUID, limit int) ([]*internal.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", ctx, userID, limit)
	ret0, _ := ret[0].([]*internal.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockRepositoryMockRecorder) GetProfiles(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockRepository)(nil).GetProfiles), ctx, userID, limit)
}

// GetUserByEmail mocks base method.
func (m *MockRepository) GetUserByEmail(ctx context.Context, email string) (*internal.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*internal.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockRepositoryMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserFeatures mocks base method.
func (m *MockRepository) GetUserFeatures(ctx context.Context, userID uuid.UUID) ([]*internal.UserFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFeatures", ctx, userID)
	ret0, _ := ret[0].([]*internal.UserFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFeatures indicates an expected call of GetUserFeatures.
func (mr *MockRepositoryMockRecorder) GetUserFeatures(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFeatures", reflect.TypeOf((*MockRepository)(nil).GetUserFeatures), ctx, userID)
}

// HasActiveFeature mocks base method.
func (m *MockRepository) HasActiveFeature(ctx context.Context, userID uuid.UUID, featureName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveFeature", ctx, userID, featureName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveFeature indicates an expected call of HasActiveFeature.
func (mr *MockRepositoryMockRecorder) HasActiveFeature(ctx, userID, featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveFeature", reflect.TypeOf((*MockRepository)(nil).HasActiveFeature), ctx, userID, featureName)
}
